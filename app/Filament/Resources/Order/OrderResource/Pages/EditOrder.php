<?php

namespace App\Filament\Resources\Order\OrderResource\Pages;

use App\Filament\Resources\Order\OrderResource;
use App\Models\Order\OrderShipment;
use App\Models\Payment\Payment;
use App\Services\Iotron\MoneyService\Money;
use Filament\Actions;
use Filament\Forms\Components\DateTimePicker;
use Filament\Forms\Components\Grid;
use Filament\Forms\Components\Placeholder;
use Filament\Forms\Components\Repeater;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Tabs;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Components\ViewField;
use Filament\Forms\Form;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Database\Eloquent\Model;

class EditOrder extends EditRecord
{
    protected static string $resource = OrderResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\ViewAction::make(),
            Actions\DeleteAction::make(),
        ];
    }

    public function mount(int|string $record): void
    {
        parent::mount($record); // TODO: Change the autogenerated stub
        $data = $this->record->toArray();
        $data['amount'] = ($data['amount'] instanceof Money) ? $data['amount']->getAmount() : $data['amount'];
        $data['subtotal'] = ($data['subtotal'] instanceof Money) ? $data['subtotal']->getAmount() : $data['subtotal'];
        $data['discount'] = ($data['discount'] instanceof Money) ? $data['discount']->getAmount() : $data['discount'];
        $data['tax'] = ($data['tax'] instanceof Money) ? $data['tax']->getAmount() : $data['tax'];
        $data['total'] = ($data['total'] instanceof Money) ? $data['total']->getAmount() : $data['total'];
        $this->form->fill($data);

    }

    public function form(Form $form): Form
    {
        return parent::form($form)
            ->schema([

                Tabs::make('Label')
                    ->contained(false)
                    ->columnSpanFull()
                    ->tabs([
                        Tabs\Tab::make('General')
                            ->columns(2)
                            ->schema($this->getOrderSchema()),
                        Tabs\Tab::make('Payment')
                            ->schema($this->getPaymentSchema()),
                        //                        Tabs\Tab::make('Product')
                        //                            ->schema($this->getProductSchema()),
                        Tabs\Tab::make('Shipping')
                            ->schema($this->getShippingSchema()),
                    ]),

            ]);
    }

    public function getOrderSchema(): array
    {
        return [

        ];
    }

    public function getPaymentSchema()
    {
        return [
            Repeater::make('payment')
                ->relationship('payment')
                ->addable(false)
                ->columns(2)
                ->mutateRelationshipDataBeforeFillUsing(function (array $data) {
                    $data['subtotal'] = ($data['subtotal'] instanceof Money) ? $data['subtotal']->getAmount() : $data['subtotal'];
                    $data['discount'] = ($data['discount'] instanceof Money) ? $data['discount']->getAmount() : $data['discount'];
                    $data['tax'] = ($data['tax'] instanceof Money) ? $data['tax']->getAmount() : $data['tax'];
                    $data['total'] = ($data['total'] instanceof Money) ? $data['total']->getAmount() : $data['total'];

                    return $data;
                })
                ->schema([

                    Placeholder::make('provider_gen_id')
                        ->hint('Payment Order ID')
                        ->content(function ($state) {
                            return $state;
                        }),

                    TextInput::make('provider_ref_id')
                        ->label('Payment ID')
                        ->helperText('generate while pay the payment (custom payment init)')
                        ->hint('Max: 50')
                        ->maxLength(50),

                    Select::make('status')
                        ->inlineLabel()
                        ->options(Payment::STATUS_OPTION),

                    Toggle::make('verified')
                        ->hint('Payment Verification'),

                ]),
        ];
    }

    public function getShippingSchema()
    {
        return [

            ViewField::make('billing_address_id')
                ->view('filament-custom.forms.billing-shipping-order-address'),

            Repeater::make('shipments')
                ->label('List Of Shipments')
                ->addable(false)
                ->relationship('shipments', function ($query) {
                    return $query->with([
                        'pickupAddress',
                        'deliveryAddress',
                        'shippingProvider',
                    ]);
                })
                ->mutateRelationshipDataBeforeFillUsing(function ($data) {
                    if (isset($data['charge']) && $data['charge'] instanceof Money) {
                        $data['charge'] = $data['charge']->getAmount();
                    }

                    return $data;
                })
                ->columns(2)
                ->schema([

                    TextInput::make('tracking_id')
                        ->label('Tracking ID')
                        ->columnSpanFull()
                        ->inlineLabel()
                        ->placeholder('Enter Tracking Id/Code')
                        ->hint('Max: 200')
                        ->maxLength(200),

                    Select::make('status')
                        ->inlineLabel()
                        ->options(OrderShipment::StatusOptions)
                        ->columnSpanFull()
                        ->required(),

                    Grid::make('left_bar')
                        ->columnSpan(1)
                        ->schema([
                            Placeholder::make('shipping_provider')
                                ->hiddenLabel()
                                ->content(function (Model $record) {
                                    $record->loadMissing('shippingProvider');
                                    $text = 'Quantity : '.$record->total_quantity;
                                    if (! is_null($record->shippingProvider)) {
                                        $text .= ' |Shipping Provider : '.$record->shippingProvider->name.'  ( Code: '.$record->shippingProvider->code.')';
                                    } else {
                                        $text .= ' |Shipping Provider : --not set yet--';
                                    }

                                    return $text;
                                }),

                            TextInput::make('weight')
                                ->inputMode('decimal')
                                ->numeric()
                                ->hint('Max: 100')
                                ->placeholder('Enter package weight')
                                ->required()
                                ->maxLength(100),

                            TextInput::make('length')
                                ->inputMode('decimal')
                                ->numeric()
                                ->placeholder('Enter package length')
                                ->required()
                                ->hint('Max: 100')
                                ->maxLength(100),

                            TextInput::make('breadth')
                                ->inputMode('decimal')
                                ->numeric()
                                ->required()
                                ->placeholder('Enter package breadth')
                                ->hint('Max: 100')
                                ->maxLength(100),

                            TextInput::make('height')
                                ->inputMode('decimal')
                                ->numeric()
                                ->required()
                                ->placeholder('Enter package height')
                                ->hint('Max: 100')
                                ->maxLength(100),
                            Placeholder::make('charge')
                                ->content(function ($state) {
                                    return ($state instanceof Money) ? $state->formatted() : Money::format($state ?? 0.00);
                                }),

                        ]),

                    Grid::make('right_bar')
                        ->columnSpan(1)
                        ->schema([
                            ViewField::make('pickup')
                                ->view('filament-custom.forms.address-placeholder')
                                ->columnSpan(1)
                                ->formatStateUsing(function (Model $record) {
                                    return $record->pickupAddress->toArray();
                                })
                                ->viewData([
                                    'label' => 'Pickup Address',
                                    'textAlign' => 'right',
                                ]),

                            ViewField::make('delivery')
                                ->view('filament-custom.forms.address-placeholder')
                                ->columnSpan(1)
                                ->formatStateUsing(function (Model $record) {
                                    return $record->deliveryAddress->toArray();
                                })
                                ->viewData([
                                    'label' => 'Delivery Address',
                                    'textAlign' => 'right',
                                ]),

                        ]),

                    Repeater::make('shipment_track_activities')
                        ->label('Shipment Tracking Activity')
                        ->hint('Tell Your Customer About This  Order Shipment Activity')
                        ->addActionLabel('Add Activity')
                        ->columnSpanFull()
                        ->columns(2)
                        ->schema([
                            DateTimePicker::make('date')
                                ->seconds(false)
                                ->required()
                                ->hint('Activity Update On')
                                ->default(now()),
                            TextInput::make('location')
                                ->required()
                                ->placeholder('Enter Shipment Location')
                                ->hint('Max: 100')
                                ->maxLength(100),
                            TextInput::make('activity')
                                ->required()
                                ->placeholder('Enter Activity')
                                ->maxLength(255)
                                ->hint('Max: 255')
                                ->columnSpanFull(),
                        ]),

                ]),

        ];

    }
}
