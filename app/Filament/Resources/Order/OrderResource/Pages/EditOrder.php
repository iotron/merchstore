<?php

namespace App\Filament\Resources\Order\OrderResource\Pages;

use App\Filament\Resources\Order\OrderResource;
use App\Helpers\Money\Money;
use App\Models\Customer\Customer;
use App\Models\Localization\Address;
use App\Models\Order\OrderShipment;
use App\Models\Product\Product;
use App\Models\Shipping\ShippingProvider;
use Filament\Actions;
use Filament\Forms\Components\Builder;
use Filament\Forms\Components\Repeater;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Tabs;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Database\Eloquent\Model;

class EditOrder extends EditRecord
{
    protected static string $resource = OrderResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\ViewAction::make(),
            Actions\DeleteAction::make(),
        ];
    }

    public function mount(int|string $record): void
    {
        parent::mount($record); // TODO: Change the autogenerated stub
        $data = $this->record->toArray();
        $data['amount'] = ($data['amount'] instanceof Money) ? $data['amount']->getAmount() : $data['amount'];
        $data['subtotal'] = ($data['subtotal'] instanceof Money) ? $data['subtotal']->getAmount() : $data['subtotal'];
        $data['discount'] = ($data['discount'] instanceof Money) ? $data['discount']->getAmount() : $data['discount'];
        $data['tax'] = ($data['tax'] instanceof Money) ? $data['tax']->getAmount() : $data['tax'];
        $data['total'] = ($data['total'] instanceof Money) ? $data['total']->getAmount() : $data['total'];
        $this->form->fill($data);
    }


    public function form(Form $form): Form
    {
        return parent::form($form)
            ->schema([

                Tabs::make('Label')
                    ->contained(false)
                    ->columnSpanFull()
                    ->tabs([
                        Tabs\Tab::make('General')
                            ->columns(2)
                            ->schema($this->getOrderSchema()),
                        Tabs\Tab::make('Product')
                            ->schema($this->getProductSchema()),
                        Tabs\Tab::make('Shipping')
                            ->schema($this->getShippingSchema()),
                    ]),





            ]);
    }


    public function getOrderSchema(): array
    {
        return [
            TextInput::make('uuid')
                ->label('UUID')
                ->required()
                ->columnSpanFull()
                ->maxLength(255),






            TextInput::make('quantity')
                ->required()
                ->numeric(),


            TextInput::make('amount')
                ->required()
                ->numeric(),
            TextInput::make('subtotal')
                ->required()
                ->numeric(),
            TextInput::make('discount')
                ->required()
                ->numeric(),

            TextInput::make('tax')
                ->required()
                ->numeric(),

            TextInput::make('total')
                ->required()
                ->numeric(),
        ];
    }

    public function getProductSchema()
    {
        return [

//            Select::make('customer_id')
//                ->relationship('customer', 'name')
//                ->lazy()
//                ->required(),


            TextInput::make('customer_gstin')
                ->maxLength(255),


            Repeater::make('orderProducts')
                ->relationship('orderProducts')
                ->columns(2)
                ->formatStateUsing(function ($state){

                    $bag= $state;
                    foreach ($state as $key => $rec)
                    {
                        $bag[$key]['amount'] = $bag[$key]['amount']->getAmount();
                        $bag[$key]['discount'] = $bag[$key]['discount']->getAmount();
                        $bag[$key]['tax'] = $bag[$key]['tax']->getAmount();
                        $bag[$key]['total'] = $bag[$key]['total']->getAmount();
                    }
                    return $bag;
                })
                ->schema([
                    Select::make('product_id')
                        ->options(Product::where([
                            ['type','=',Product::SIMPLE],
                            ['status','=',Product::PUBLISHED]
                        ])->get()->pluck('sku','id')),
                    TextInput::make('quantity'),

                    TextInput::make('amount'),
                    TextInput::make('discount'),
                    Toggle::make('has_tax')
                        ->inline()
                        ->default(false)
                        ->lazy(),
                    TextInput::make('tax')
                        ->visible(function (Get $get){
                            return $get('has_tax');
                        }),
                    TextInput::make('total')->columnSpanFull(),

                ])




        ];
    }

    public function getShippingSchema()
    {
        return [

            Select::make('billing_address_id')
                ->relationship('billingAddress', 'name')
                ->getOptionLabelFromRecordUsing(function ($record){
                    return $record->name.' [ Address :- '.$record->address_1.' - (Type:-'.$record->type.' Postal:-'.$record->postal_code.' City :-'.$record->city.')]';
                }),

            Toggle::make('shipping_is_billing')
                ->lazy()
                ->default(function (?Model $record){
                    if ($record)
                    {
                        return (bool) $record->shipping_address_id;
                    }else{
                        return false;
                    }
                }),

            Select::make('shipping_address_id')
                ->relationship('shippingAddress', 'name')
                ->getOptionLabelFromRecordUsing(function ($record){
                    return $record->name.' [ Address :- '.$record->address_1.' - (Type:-'.$record->type.' Postal:-'.$record->postal_code.' City :-'.$record->city.')]';
                })
                ->lazy()
                ->visible(function (Get $get){
                    return $get('shipping_is_billing');
                }),


            Repeater::make('shipments')
                ->relationship('shipments')
                ->columns(2)
                ->schema([

                    TextInput::make('total_quantity')
                        ->required()
                        ->integer(),

                    Select::make('status')
                        ->options(OrderShipment::StatusOptions)
                        ->required(),
                    TextInput::make('invoice_uid')
                        ->maxLength(255),
                    TextInput::make('tracking_id')
                        ->maxLength(255),

                    Select::make('shipping_provider_id')
                        ->options(ShippingProvider::where('status',true)->get()->pluck('name','id')),

                    Select::make('pickup_address')
                        ->options(Address::all()->pluck('name','id')),

                    Select::make('delivery_address')
                        ->options(function (Get $get){
                            if ($get('customer_id'))
                            {
                                $customer = Customer::with('addresses')->firstWhere('id',$get('customer_id'));
//                                if ($get('shipping_is_billing'))
//                                {
//                                    return $customer->addresses->where('id',$get('billing_address_id'))->pluck('name','id');
//                                }else{
//                                    return $customer->addresses->where('id',$get('shipping_address_id'))->pluck('name','id');
//                                }
                                return $customer->addresses->pluck('name','id');
                            }else{
                                return Address::all()->pluck('name','id');
                            }
                        }),

                ]),


        ];

    }


}
