<?php

namespace App\Filament\Resources\Order\OrderResource\Pages;

use App\Filament\Resources\Order\OrderResource;
use App\Helpers\Money\Money;
use App\Models\Customer\Customer;
use App\Models\Localization\Address;
use App\Models\Order\OrderShipment;
use App\Models\Product\Product;
use App\Models\Shipping\ShippingProvider;
use App\Services\ShippingService\ShippingService;
use Filament\Actions;
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\Builder;
use Filament\Forms\Components\DateTimePicker;
use Filament\Forms\Components\Grid;
use Filament\Forms\Components\KeyValue;
use Filament\Forms\Components\Placeholder;
use Filament\Forms\Components\Repeater;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Tabs;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Components\ViewField;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Forms\Set;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Database\Eloquent\Model;

class EditOrder extends EditRecord
{
    protected static string $resource = OrderResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\ViewAction::make(),
            Actions\DeleteAction::make(),
        ];
    }

    public function mount(int|string $record): void
    {
        parent::mount($record); // TODO: Change the autogenerated stub
        $data = $this->record->toArray();
        $data['amount'] = ($data['amount'] instanceof Money) ? $data['amount']->getAmount() : $data['amount'];
        $data['subtotal'] = ($data['subtotal'] instanceof Money) ? $data['subtotal']->getAmount() : $data['subtotal'];
        $data['discount'] = ($data['discount'] instanceof Money) ? $data['discount']->getAmount() : $data['discount'];
        $data['tax'] = ($data['tax'] instanceof Money) ? $data['tax']->getAmount() : $data['tax'];
        $data['total'] = ($data['total'] instanceof Money) ? $data['total']->getAmount() : $data['total'];
        $this->form->fill($data);


    }


    public function form(Form $form): Form
    {
        return parent::form($form)
            ->schema([

                Tabs::make('Label')
                    ->contained(false)
                    ->columnSpanFull()
                    ->tabs([
                        Tabs\Tab::make('General')
                            ->columns(2)
                            ->schema($this->getOrderSchema()),
                        Tabs\Tab::make('Product')
                            ->schema($this->getProductSchema()),
                        Tabs\Tab::make('Shipping')
                            ->schema($this->getShippingSchema()),
                    ]),





            ]);
    }


    public function getOrderSchema(): array
    {
        return [
            TextInput::make('uuid')
                ->label('UUID')
                ->required()
                ->columnSpanFull()
                ->maxLength(255),






            TextInput::make('quantity')
                ->required()
                ->numeric(),


            TextInput::make('amount')
                ->required()
                ->numeric(),
            TextInput::make('subtotal')
                ->required()
                ->numeric(),
            TextInput::make('discount')
                ->required()
                ->numeric(),

            TextInput::make('tax')
                ->required()
                ->numeric(),

            TextInput::make('total')
                ->required()
                ->numeric(),
        ];
    }

    public function getProductSchema()
    {
        return [

//            Select::make('customer_id')
//                ->relationship('customer', 'name')
//                ->lazy()
//                ->required(),


            TextInput::make('customer_gstin')
                ->maxLength(255),


            Repeater::make('orderProducts')
                ->relationship('orderProducts')
                ->columns(2)
                ->formatStateUsing(function ($state){

                    $bag= $state;
                    foreach ($state as $key => $rec)
                    {
                        $bag[$key]['amount'] = $bag[$key]['amount']->getAmount();
                        $bag[$key]['discount'] = $bag[$key]['discount']->getAmount();
                        $bag[$key]['tax'] = $bag[$key]['tax']->getAmount();
                        $bag[$key]['total'] = $bag[$key]['total']->getAmount();
                    }
                    return $bag;
                })
                ->schema([
                    Select::make('product_id')
                        ->options(Product::where([
                            ['type','=',Product::SIMPLE],
                            ['status','=',Product::PUBLISHED]
                        ])->get()->pluck('sku','id')),
                    TextInput::make('quantity'),

                    TextInput::make('amount'),
                    TextInput::make('discount'),
                    TextInput::make('tax')
                        ->visible(function (Get $get){
                            return $get('has_tax');
                        }),
                    TextInput::make('total')->columnSpanFull(),

                ])




        ];
    }

    public function getShippingSchema()
    {
        return [


            ViewField::make('billing_address_id')
                ->view('filament-custom.forms.billing-shipping-order-address'),



            Repeater::make('shipments')
                ->label('List Of Shipments')
                ->addable(false)
                ->relationship('shipments',function ($query){
                    return $query->with([
                        'pickupAddress',
                        'deliveryAddress',
                        'shippingProvider'
                    ]);
                })
                ->columns(2)
                ->schema([

                    TextInput::make('tracking_id')
                        ->label('Tracking ID')
                        ->columnSpanFull()
                        ->inlineLabel()
                        ->placeholder('Enter Tracking Id/Code')
                        ->hint('Max: 200')
                        ->maxLength(200),


                    Select::make('status')
                        ->inlineLabel()
                        ->options(OrderShipment::StatusOptions)
                        ->columnSpanFull()
                        ->required(),

                    Grid::make('left_bar')
                        ->columnSpan(1)
                        ->schema([
                            Placeholder::make('shipping_provider')
                                ->hiddenLabel()
                                ->content(function (Model $record){
                                    return 'Quantity : '.$record->total_quantity.' |Shipping Provider : '.$record->shippingProvider->name . '  ( Code: '.$record->shippingProvider->code.')';
                                }),


                            TextInput::make('weight')
                                ->inputMode('decimal')
                                ->numeric()
                                ->hint('Max: 100')
                                ->placeholder('Enter package weight')
                                ->required()
                                ->maxLength(100),

                            TextInput::make('length')
                                ->inputMode('decimal')
                                ->numeric()
                                ->placeholder('Enter package length')
                                ->required()
                                ->hint('Max: 100')
                                ->maxLength(100),

                            TextInput::make('breadth')
                                ->inputMode('decimal')
                                ->numeric()
                                ->required()
                                ->placeholder('Enter package breadth')
                                ->hint('Max: 100')
                                ->maxLength(100),

                            TextInput::make('height')
                                ->inputMode('decimal')
                                ->numeric()
                                ->required()
                                ->placeholder('Enter package height')
                                ->hint('Max: 100')
                                ->maxLength(100),
                            Placeholder::make('charge')
//                                ->hintAction(
//                                    Action::make('fetchRate')
//                                        ->requiresConfirmation()
//                                        ->action(function (){
//                                            dd("sdfsdf");
//                                        })
//                                )
                                ->content(function ($state){
                                    return ($state instanceof Money) ? $state->formatted() : Money::format($state ?? 0.00) ;
                                }),



                        ]),




                    Grid::make('right_bar')
                        ->columnSpan(1)
                        ->schema([
                            ViewField::make('pickup')
                                ->view('filament-custom.forms.address-placeholder')
                                ->columnSpan(1)
                                ->formatStateUsing(function (Model $record){
                                    return $record->pickupAddress->toArray();
                                })
                                ->viewData([
                                    'label' => 'Pickup Address',
                                    'textAlign' => 'right'
                                ]),

                            ViewField::make('delivery')
                                ->view('filament-custom.forms.address-placeholder')
                                ->columnSpan(1)
                                ->formatStateUsing(function (Model $record){
                                    return $record->deliveryAddress->toArray();
                                })
                                ->viewData([
                                    'label' => 'Delivery Address',
                                    'textAlign' => 'right'
                                ]),



                        ]),




                    Repeater::make('shipment_track_activities')
                        ->label('Shipment Tracking Activity')
                        ->hint('Tell Your Customer About This  Order Shipment Activity')
                        ->addActionLabel('Add Activity')
                        ->columnSpanFull()
                        ->columns(2)
                        ->schema([
                            DateTimePicker::make('date')
                                ->seconds(false)
                                ->required()
                                ->hint('Activity Update On')
                                ->default(now()),
                            TextInput::make('location')
                                ->required()
                                ->placeholder('Enter Shipment Location')
                                ->hint('Max: 100')
                                ->maxLength(100),
                            TextInput::make('activity')
                                ->required()
                                ->placeholder('Enter Activity')
                                ->maxLength(255)
                                ->hint('Max: 255')
                                ->columnSpanFull(),
                        ]),




//                    Section::make('Package Details')
//                        ->aside()
//                        ->columnSpan(1)
//                        ->schema([
////                        Select::make('shipping_provider_id')
////                        ->relationship('shippingProvider','name'),
//
//
//
//
////                        Placeholder::make('charge')
////                            ->content(function (Model $record,Get $get,ShippingService $shippingService){
//                                if (!is_null($get('weight')) && !is_null($get('length')) && !is_null($get('breadth')) && !is_null($get('height')))
//                                {
//                                    $shippingProviderModel = ShippingProvider::firstWhere('id',$get('shipping_provider_id'));
//                                    $record->load([
//                                        'pickupAddress',
//                                        'deliveryAddress'
//                                    ]);
//                                    $pickUpPostalCode = $record->pickupAddress->postal_code;
//                                    $deliveryPostalCode = $record->deliveryAddress->postal_code;
////                                $result = $shippingService->provider($shippingProviderModel->code)->courier()->getCharge($pickUpPostalCode,$deliveryPostalCode);
//                                    $result = $shippingService->provider('shiprocket')->courier()->getCharge($pickUpPostalCode,$deliveryPostalCode,$get('weight'));
//                                    return $result;
//                                }else{
//                                    return 'Please fill weight,length,breadth,height';
//                                }
////
////
////                            })
//                        ]),




                ]),


        ];

    }







}
